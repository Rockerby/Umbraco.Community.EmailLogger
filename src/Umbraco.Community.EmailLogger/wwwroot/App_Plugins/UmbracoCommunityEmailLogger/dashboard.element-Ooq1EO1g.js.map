{"version":3,"file":"dashboard.element-Ooq1EO1g.js","sources":["../../../Client/src/dashboards/dashboard.element.ts"],"sourcesContent":["import { LitElement, css, html, customElement, state, repeat } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { EmailLog, UmbracoCommunityEmailLoggerService, UserModel } from \"../api\";\r\nimport { UUIButtonElement } from \"@umbraco-cms/backoffice/external/uui\";\r\nimport { UMB_NOTIFICATION_CONTEXT, UmbNotificationContext } from \"@umbraco-cms/backoffice/notification\";\r\nimport { UMB_CURRENT_USER_CONTEXT, UmbCurrentUserModel } from \"@umbraco-cms/backoffice/current-user\";\r\n\r\n@customElement('example-dashboard')\r\nexport class ExampleDashboardElement extends UmbElementMixin(LitElement) {\r\n\r\n  @state()\r\n  private _yourName: string | undefined = \"Press the button!\";\r\n\r\n  @state()\r\n  private _timeFromMrWolf: Date | undefined;\r\n\r\n  @state()\r\n  private _serverUserData: UserModel | undefined = undefined;\r\n\r\n  @state()\r\n  private _userData: Array<EmailLog> = [];\r\n\r\n  @state()\r\n  private _contextCurrentUser: UmbCurrentUserModel | undefined = undefined;\r\n\r\n  @state()\r\n  private _showCode: boolean = true;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_NOTIFICATION_CONTEXT, (notificationContext) => {\r\n      this.#notificationContext = notificationContext;\r\n    });\r\n\r\n    this.consumeContext(UMB_CURRENT_USER_CONTEXT, (currentUserContext) => {\r\n\r\n      // When we have the current user context\r\n      // We can observe properties from it, such as the current user or perhaps just individual properties\r\n      // When the currentUser object changes we will get notified and can reset the @state properrty\r\n      this.observe(currentUserContext.currentUser, (currentUser) => {\r\n        this._contextCurrentUser = currentUser;\r\n      });\r\n    });\r\n  }\r\n\r\n  #notificationContext: UmbNotificationContext | undefined = undefined;\r\n\r\n  #onClickWhoAmI = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    const prettyButton = document.getElementById('btnTogglePretty') as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    const { data, error } = await UmbracoCommunityEmailLoggerService.all();\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      this._userData = data;\r\n      buttonElement.state = \"success\";\r\n      prettyButton.disabled = false;\r\n    }\r\n\r\n    /*if (this.#notificationContext) {\r\n      this.#notificationContext.peek(\"warning\", {\r\n        data: {\r\n          headline: `You are ${this._serverUserData?.name}`,\r\n          message: `Your email is ${this._serverUserData?.email}`,\r\n        }\r\n      })\r\n    }*/\r\n  }\r\n  #togglePretty = async (ev: Event) => {\r\n    this._showCode = !this._showCode;\r\n  }\r\n\r\n  #onClickWhatsTheTimeMrWolf = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    // Getting a string - should I expect a datetime?!\r\n    const { data, error } = await UmbracoCommunityEmailLoggerService.whatsTheTimeMrWolf();\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      this._timeFromMrWolf = new Date(data);\r\n      buttonElement.state = \"success\";\r\n    }\r\n  }\r\n\r\n  #onClickWhatsMyName = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    const { data, error } = await UmbracoCommunityEmailLoggerService.whatsMyName();\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    this._yourName = data;\r\n    buttonElement.state = \"success\";\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n        <uui-box headline=\"Want to see some logs?\">\r\n            <div slot=\"header\">[Server]</div>\r\n            <uui-button color=\"default\" look=\"primary\" @click=\"${this.#onClickWhoAmI}\">\r\n                Go get data\r\n            </uui-button>\r\n            <uui-button color=\"default\" look=\"secondary\"  @click=\"${this.#togglePretty}\">\r\n                Toggle pretty HTML\r\n            </uui-button>\r\n        </uui-box>\r\n                \r\n        <uui-box headline=\"Email Logs\" class=\"wide\">\r\n          <uui-table id=\"users-wrapper\">\r\n\t\t\t\t  <uui-table-row>\r\n\t\t\t\t\t  <uui-table-head-cell>Recipient</uui-table-head-cell>\r\n\t\t\t\t\t  <uui-table-head-cell>Subject</uui-table-head-cell>\r\n\t\t\t\t\t  <uui-table-head-cell>Sent</uui-table-head-cell>\r\n\t\t\t\t\t  <uui-table-head-cell>Message</uui-table-head-cell>\r\n\t\t\t\t  </uui-table-row>\r\n\t\t\t\t  ${repeat(this._userData, (user) => user.id, (user) => this._renderEmailLog(user))}\r\n\t\t\t  </uui-table>\r\n        </uui-box>\r\n\r\n    `;\r\n  }\r\n\r\n  private _renderEmailLog(user: EmailLog) {\r\n    if (!user) return;\r\n    return html`<uui-table-row class=\"user\">\r\n        <uui-table-cell>${user.recipients}</uui-table-cell>\r\n        <uui-table-cell>${user.subject}</uui-table-cell>\r\n        <uui-table-cell>${user.isSuccessful ? 'YES' : 'No'}</uui-table-cell>\r\n        <uui-table-cell><div class=\"htmlbox\">${this.rawHTML(user.message)}</div></uui-table-cell>\r\n    </uui-table-row>`;\r\n  }\r\n\r\n  private rawHTML(html: string) {\r\n    if (this._showCode) {\r\n      return html;\r\n    }\r\n\r\n    var frag = document.createRange().createContextualFragment(`${html}`);\r\n    return frag;\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n            :host {\r\n                display: grid;\r\n                gap: var(--uui-size-layout-1);\r\n                padding: var(--uui-size-layout-1);\r\n                grid-template-columns: 1fr 1fr 1fr;\r\n            }\r\n\r\n            uui-box {\r\n                margin-bottom: var(--uui-size-layout-1);\r\n            }\r\n\r\n            h2 {\r\n                margin-top:0;\r\n            }\r\n\r\n            .wide {\r\n                grid-column: span 3;\r\n            }\r\n            .htmlbox {\r\n              max-width:800px;\r\n              height:300px;\r\n              overflow-y: scroll;\r\n            }\r\n    `];\r\n}\r\n\r\nexport default ExampleDashboardElement;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'example-dashboard': ExampleDashboardElement;\r\n  }\r\n}\r\n"],"names":["_notificationContext","_onClickWhoAmI","_togglePretty","_onClickWhatsTheTimeMrWolf","_onClickWhatsMyName","ExampleDashboardElement","UmbElementMixin","LitElement","__privateAdd","ev","buttonElement","prettyButton","data","error","UmbracoCommunityEmailLoggerService","UMB_NOTIFICATION_CONTEXT","notificationContext","__privateSet","UMB_CURRENT_USER_CONTEXT","currentUserContext","currentUser","html","__privateGet","repeat","user","frag","css","__decorateClass","state","customElement","ExampleDashboardElement$1"],"mappings":"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"}